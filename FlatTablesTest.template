package {{.PackageName}}

/*
	{{.FlatTablesTestCodeFileName}}
	DO NOT MODIFY
	{{.AutomaticallyFrom}}
*/

import (
	{{range .Imports}}
	{{- .}}
	{{end}}
)

/*
Copyright (c) {{.Year}} Malcolm Gorman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

func TestFlatTablesFromTableSet(t *testing.T) {
	sTables :=
	`[MyAbcTable]
	a       b       c       d
	int64   int64   int16   float32
	1       2       3       3
	11      22      33      3.3
	111     222     333     3.33
	2       4       8       8.0
	
	[MyXyzTable]
	x       y       z
	int64   int32   int64
	4       5       6
	44      55      66
	444     555     666
	4444    5555    6666
	16      32      64
	
	[MyStrTable]
	s           i       ss
	string      int8    string
	"Fred"      0       "The rain ..."
	"Wilma"     1       "in Spain ..."
	"Barney"    2       "falls mainly ..."
	"Betty"     3       "on the ..."
	"Bam Bam"   4       "plain."
	"Pebbles"   5       "Why?"
	"Grand Poobah"  6   "Why not!"
	`

	var err error

	var tableSet *gotables.TableSet
	tableSet, err = gotables.NewTableSetFromString(sTables)
	if err != nil { t.Error(err) }

	/*
		Note:
		We discard the complete flatbuffers []byte slice here, using blank _
		We would use it if we wanted to transmit it or save it to file.
		We use the flatTables object to obtain flatbuffers []byte slices later on
		for individual tables inside the complete flatbuffers []byte slice.
	*/
	var flatTables *FlatTables
	flatTables, _, err = FlatTablesFromTableSet(tableSet)
	if err != nil { t.Error(err) }

	{{/* Save .PackageName before it goes out of scope. */}}
	{{- $packageName := .PackageName -}}

	// "loop" through tables.

	var table *gotables.Table

	{{- range $tableIndex, $element := .Tables}}
	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name}}

	// table #{{$tableIndex}}

	// Get the *gotables.Table object of this table. From "github.com/urban-wombat/gotables"
	table, err = tableSet.TableByTableIndex({{$tableIndex}})
	if err != nil { t.Error(err) }

	// Get the []byte flatbuffers slice for this table.
	// {{$packageName}}.{{.Table.Name}}Bytes() is generated by flatbuffers utility flatc (called by gotft)
	{{.Table.Name | firstCharToLower}}Bytes := flatTables.{{.Table.Name}}Bytes()
	if {{.Table.Name | firstCharToLower}}Bytes == nil { t.Errorf("{{.Table.Name | firstCharToLower}}Bytes is nil") }

	// Get the {{.Table.Name}} object using code generated by flatc
	// {{$packageName}}.GetRootAs{{.Table.Name}}() is generated by flatbuffers utility flatc (called by gotft)
    {{.Table.Name | firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name | firstCharToLower}}Bytes, 0)
	if {{.Table.Name | firstCharToLower}} == nil { t.Errorf("{{.Table.Name | firstCharToLower}} is nil") }

		{{range .Cols}}
		for rowIndex := table.RowCount()-1; rowIndex >= 0; rowIndex-- {
			cell, err := table.Get{{.ColType | firstCharToUpper}}("{{.ColName}}", rowIndex)
			if err != nil { t.Error(err) }

			{{- if .IsString}}
			{{.ColName}} := {{$tableName | firstCharToLower}}.{{.ColName | firstCharToUpper}}(rowIndex)
			if string({{.ColName}}) != cell { t.Errorf("{{.ColName}} %v != cell %v", {{.ColName}}, cell) }
			{{else}}
			{{.ColName}} := {{$tableName | firstCharToLower}}.{{.ColName | firstCharToUpper}}(rowIndex)
			if {{.ColName}} != cell { t.Errorf("{{.ColName}} %v != cell %v", {{.ColName}}, cell) }
			{{end}}
		}
		{{end}}

	{{end -}}	{{/* end tables */}}
}
