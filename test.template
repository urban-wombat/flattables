package {{.NameSpace}}

/*
	{{.GeneratedFile}}
	DO NOT MODIFY
	{{.GeneratedDateFromFile}}
	{{.UsingCommand -}}
*/

import (
	{{range .Imports}}
	{{- .}}
	{{end}}
)

/*
Copyright (c) {{"2017"|yearRangeFromFirstYear}} Malcolm Gorman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

func TestNewFlatBuffersFromTableSet(t *testing.T) {
	var err error

	// This reads and parses tables from file "{{.GotablesFileName}}" into a gotables TableSet object.
	var tableSet *gotables.TableSet
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { t.Error(err) }

	/*
		Note:
		We discard the complete flatbuffers []byte slice here, using blank _
		We would use it if we wanted to transmit it or save it to file.
		We use the flatTables object to obtain flatbuffers []byte slices later on
		for individual tables inside the complete flatbuffers []byte slice.
		This transforms the gotables TableSet object into a FlatTables object.
	*/
	var flatTables *FlatTables
	var flatBuffers []byte
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { t.Fatal(err) }
	_ = flatBuffers	// Discard. In practice you might save or transmit the FlatBuffers objects.

	{{/* Save .PackageName before it goes out of scope. */}}
	{{- $packageName := .PackageName -}}

	{{/* Save .GotablesFileName before it goes out of scope. */}}
	{{- $gotablesFileName := .GotablesFileName -}}

	// "loop" through tables.

	var table *gotables.Table
	var rowCount int
	var childLength int

	{{- range $tableIndex, $element := .Tables}}
	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name}}

	// table #{{$tableIndex}}

	// Get the *gotables.Table object of this table (originally from gotables file "{{$gotablesFileName}}").
	table, err = tableSet.TableByTableIndex({{$tableIndex}})
	if err != nil { t.Error(err) }

	// Get the []byte flatbuffers slice for this table.
	// {{$packageName}}.{{.Table.Name}}Bytes() is generated by flatbuffers utility flatc (invoked by flattablesc)
	{{.Table.Name|firstCharToLower}}Bytes := flatTables.{{.Table.Name}}Bytes()
	if {{.Table.Name|firstCharToLower}}Bytes == nil { t.Errorf("{{.Table.Name|firstCharToLower}}Bytes is nil") }

	// Get the {{.Table.Name}} object using code generated by flatc
	// {{$packageName}}.GetRootAs{{.Table.Name}}() is generated by flatbuffers utility flatc (invoked by flattablesc)
    {{.Table.Name|firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name|firstCharToLower}}Bytes, 0)
	if {{.Table.Name|firstCharToLower}} == nil { t.Errorf("{{.Table.Name|firstCharToLower}} is nil") }

	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name}}

	rowCount = table.RowCount()
	{{range .Cols}}
	childLength = {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}Length()
	if childLength != rowCount {
		t.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName|firstCharToUpper}}Length() %d != {{$tableName}}.RowCount() %d",
			"{{$tableName}}", childLength, rowCount)
	}

	for rowIndex := 0; rowIndex < table.RowCount(); rowIndex++ {
		cell, err := table.Get{{.ColType|firstCharToUpper}}("{{.ColName}}", rowIndex)
		if err != nil { t.Error(err) }

		{{- if .IsString}}
		{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
		if string({{.ColName}}) != cell { t.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %q != gotables [%s].%s[%d] %q",
			"{{$tableName}}", rowIndex, string({{.ColName}}), "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
		// println(cell)
		{{else if .IsScalar}}
		{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
		// println(cell)
		{{- if .IsBool}}
		// Inline conversion of FlatBuffers byte to Go bool: ({{.ColName}} != 0)
		if ({{.ColName}} != 0) != cell { t.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %v != gotables [%s].%s[%d] %v",
			"{{$tableName}}", rowIndex, byteToBool({{.ColName}}), "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
		{{else}}
		if {{.ColName}} != cell { t.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %v != gotables [%s].%s[%d] %v",
			"{{$tableName}}", rowIndex, {{.ColName}}, "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
		{{end}}
		{{else}}
		t.Errorf("Unimplemented col type: %s", {{.ColType}})
		{{end}}
	}
	{{end}}

	{{end -}}	{{/* end tables */}}
}

func TestNewTableSetFromFlatBuffers(t *testing.T) {
	var err error

	// Get the data from the source gotables file and parse it into a TableSet.
	var tableSetGotables *gotables.TableSet
	tableSetGotables, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { t.Error(err) }

	// Convert the data to FlatBuffers.
	var flatTables *FlatTables
	var flatBuffers []byte
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSetGotables)
	if err != nil { t.Fatal(err) }
	_ = flatTables	// We don't need it here. Included for illustration.

	/*
		Here is the gap where flatBuffers, which is the FlatBuffers []byte array,
		might have been transmitted as a message or to a file.
	*/

	// Convert the FlatBuffers data back to a gotables TableSet.
	var tableSetFlatBuffers *gotables.TableSet
	tableSetFlatBuffers, err = NewTableSetFromFlatBuffers(flatBuffers)
	if err != nil { t.Error(err) }

	// This is essentially the body of the TableSet.Equals() method.
	if tableSetFlatBuffers.TableCount() != tableSetGotables.TableCount() {
		t.Errorf("FlatBuffers TableCount() %d != gotables TableCount() %d",
		tableSetFlatBuffers.TableCount(), tableSetGotables.TableCount())
	}

	for tableIndex := 0; tableIndex < tableSetGotables.TableCount(); tableIndex++ {
		tableGotables, err := tableSetGotables.TableByTableIndex(tableIndex)
		if err != nil { t.Error(err) }

		tableFlatBuffers, err := tableSetFlatBuffers.TableByTableIndex(tableIndex)
		if err != nil { t.Error(err) }

		equals, err := tableGotables.Equals(tableFlatBuffers)
		if !equals {
			// This is a diagnostic output so we can immediately see what might have gone wrong.
			t.Log(fmt.Sprintf("ERROR COMPARING...\n\ntableFlatBuffers:\n%s\n...WITH...\n\n%s:\n%s",
				tableFlatBuffers, "tableGotables", tableGotables))
		}
		if err != nil { t.Fatal("gotables != FlatBuffers: " + err.Error()) }
	}
}

func BenchmarkGetAndCompareFlatBuffersObjectsWithEquivalentGotablesObjects(__b *testing.B) {
	// __b leading underscores to avoid name conflict with generated code.

	var err error

	// Marshall gotables tables from "{{.GotablesFileName}}" to *gotables.TableSet
	var tableSet *gotables.TableSet
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { __b.Error(err) }

	// Marshall *FlatTables and FlatBuffers from *gotables.TableSet
	var flatTables *FlatTables
	var flatBuffers []byte
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { __b.Fatal(err) }
	_ = flatBuffers

	{{/* Save .PackageName before it goes out of scope. */}}
	{{- $packageName := .PackageName -}}

	// The benchmark is purely retrieval (from objects) and comparison. There is no marshalling here.

	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {

		// "loop" through tables.

		var table *gotables.Table

		{{- range $tableIndex, $element := .Tables}}
		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name}}

		// table #{{$tableIndex}}

		// Get the *gotables.Table object of this table (originally from "{{$gotablesFileName}}").
		table, err = tableSet.TableByTableIndex({{$tableIndex}})
		if err != nil { __b.Error(err) }

		// Get the []byte flatbuffers slice for this table.
		// {{$packageName}}.{{.Table.Name}}Bytes() is generated by flatbuffers utility flatc (invoked by flattablesc)
		{{.Table.Name|firstCharToLower}}Bytes := flatTables.{{.Table.Name}}Bytes()
		if {{.Table.Name|firstCharToLower}}Bytes == nil { __b.Errorf("{{.Table.Name|firstCharToLower}}Bytes is nil") }

		// Get the {{.Table.Name}} object using code generated by flatc
		// {{$packageName}}.GetRootAs{{.Table.Name}}() is generated by flatbuffers utility flatc (invoked by flattablesc)
	    {{.Table.Name|firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name|firstCharToLower}}Bytes, 0)
		if {{.Table.Name|firstCharToLower}} == nil { __b.Errorf("{{.Table.Name|firstCharToLower}} is nil") }

		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name}}

		{{range .Cols}}
		// Retrieve each corresponding value from gotables table and FlatBuffers table and compare them.
		for rowIndex := 0; rowIndex < table.RowCount(); rowIndex++ {
			cell, err := table.Get{{.ColType|firstCharToUpper}}("{{.ColName}}", rowIndex)
			if err != nil { __b.Error(err) }

			{{- if .IsString}}
			{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
			if string({{.ColName}}) != cell { __b.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %q != gotables [%s].%s[%d] %q",
				"{{$tableName}}", rowIndex, string({{.ColName}}), "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
			{{else if .IsScalar}}
			{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
			{{- if .IsBool}}
			// Inline conversion of FlatBuffers byte to Go bool: ({{.ColName}} != 0)
			if ({{.ColName}} != 0) != cell { __b.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %v != gotables [%s].%s[%d] %v",
				"{{$tableName}}", rowIndex, byteToBool({{.ColName}}), "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
			{{else}}
			if {{.ColName}} != cell { __b.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %v != gotables [%s].%s[%d] %v",
				"{{$tableName}}", rowIndex, {{.ColName}}, "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
			{{end}}
			{{else}}
			__b.Errorf("Unimplemented col type: %s", {{.ColType}})
			{{end}}
		}
		{{end}}

		{{end -}}	{{/* end tables */}}
	}
}

func BenchmarkWriteDataToGotablesByColName(__b *testing.B) {
	var err error

	{{range $tableIndex, $table := .Tables}}

	type {{$table.TableName}} struct {
	{{- range .Cols}}
		{{.ColName}} {{.ColType -}}
	{{end}}
	}

	var {{$table.TableName|firstCharToLower}} = []{{$table.TableName}} {
	{{range $rowIndex, $row := .Rows -}}
		{{print "\t"}}{ {{range $colIndex, $cell := $row -}}
		{{index $table.ColNames $colIndex}}:{{$cell}},{{print " " -}}
	{{end}}},
	{{end}}
	}

	var {{$table.TableName|firstCharToLower}}ColNames = []string { {{range $colIndex, $colName := $table.ColNames -}}
		"{{$colName -}}",{{print " "}}
	{{- end}}}
	var {{$table.TableName|firstCharToLower}}ColTypes = []string { {{range $colIndex, $colType := $table.ColTypes -}}
		"{{$colType -}}",{{print " "}}
	{{- end}}}

	{{end}}


	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {

		var tableSet *gotables.TableSet
		tableSet, err = gotables.NewTableSet("MyTableSet")
		if err != nil { __b.Error(err) }

		{{range $tableIndex, $table := .Tables}}
		var {{$table.TableName|firstCharToLower}}Table *gotables.Table
		{{$table.TableName|firstCharToLower}}Table, err = gotables.NewTableFromMetadata("{{$table.TableName}}", {{$table.TableName|firstCharToLower}}ColNames, {{$table.TableName|firstCharToLower}}ColTypes)
		if err != nil { __b.Error(err) }

/*		Isn't any faster than individual calls to AppendRow(). AppendRows() needs tuning?
		err = {{$table.TableName|firstCharToLower}}Table.AppendRows(len({{$table.TableName|firstCharToLower}}))
		if err != nil { __b.Error(err) }
*/

		for rowIndex := 0; rowIndex < len({{$table.TableName|firstCharToLower}}); rowIndex++ {
			err = {{$table.TableName|firstCharToLower}}Table.AppendRow()
			if err != nil { __b.Error(err) }

			{{- range $table.Cols}}

			err = {{$table.TableName|firstCharToLower}}Table.Set{{.ColType|firstCharToUpper}}("{{.ColName}}", rowIndex, {{$table.TableName|firstCharToLower}}[rowIndex].{{.ColName}})
			if err != nil { __b.Error(err) }
			{{- end}}
		}

		err = tableSet.AppendTable({{$table.TableName|firstCharToLower}}Table)
		if err != nil { __b.Error(err) }
		{{end}}
	}
}

func BenchmarkWriteDataToGotablesByColIndex(__b *testing.B) {
	var err error

	{{range $tableIndex, $table := .Tables}}

	type {{$table.TableName}} struct {
	{{- range .Cols}}
		{{.ColName}} {{.ColType -}}
	{{end}}
	}

	var {{$table.TableName|firstCharToLower}} = []{{$table.TableName}} {
	{{range $rowIndex, $row := .Rows -}}
		{{print "\t"}}{ {{range $colIndex, $cell := $row -}}
		{{index $table.ColNames $colIndex}}:{{$cell}},{{print " " -}}
	{{end}}},
	{{end}}
	}

	var {{$table.TableName|firstCharToLower}}ColNames = []string { {{range $colIndex, $colName := $table.ColNames -}}
		"{{$colName -}}",{{print " "}}
	{{- end}}}
	var {{$table.TableName|firstCharToLower}}ColTypes = []string { {{range $colIndex, $colType := $table.ColTypes -}}
		"{{$colType -}}",{{print " "}}
	{{- end}}}

	{{end}}


	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {

		var tableSet *gotables.TableSet
		tableSet, err = gotables.NewTableSet("MyTableSet")
		if err != nil { __b.Error(err) }

		{{range $tableIndex, $table := .Tables}}
		var {{$table.TableName|firstCharToLower}}Table *gotables.Table
		{{$table.TableName|firstCharToLower}}Table, err = gotables.NewTableFromMetadata("{{$table.TableName}}", {{$table.TableName|firstCharToLower}}ColNames, {{$table.TableName|firstCharToLower}}ColTypes)
		if err != nil { __b.Error(err) }

/*		Isn't any faster than individual calls to AppendRow(). AppendRows() needs tuning?
		err = {{$table.TableName|firstCharToLower}}Table.AppendRows(len({{$table.TableName|firstCharToLower}}))
		if err != nil { __b.Error(err) }
*/

		for rowIndex := 0; rowIndex < len({{$table.TableName|firstCharToLower}}); rowIndex++ {
			err = {{$table.TableName|firstCharToLower}}Table.AppendRow()
			if err != nil { __b.Error(err) }

			{{- range $table.Cols}}

			err = {{$table.TableName|firstCharToLower}}Table.Set{{.ColType|firstCharToUpper}}ByColIndex({{.ColIndex}}, rowIndex, {{$table.TableName|firstCharToLower}}[rowIndex].{{.ColName}})
			if err != nil { __b.Error(err) }
			{{- end}}
		}

		err = tableSet.AppendTable({{$table.TableName|firstCharToLower}}Table)
		if err != nil { __b.Error(err) }
		{{end}}
	}
}

func BenchmarkReadDataFromFlatBuffersToGotables(__b *testing.B) {
	// __b leading underscores to avoid name conflict with generated code.

	var err error

	/* Note:
		The data doesn't have to be read from a file. See func BenchmarkRead() where
		a new TableSet is created and populated from data in memory.
	*/
	var tableSet *gotables.TableSet
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { __b.Error(err) }

	/*
		Note:
		We discard the complete flatbuffers []byte slice here, using blank _
		We would use it if we wanted to transmit it or save it to file.
		We use the flatTables object to obtain flatbuffers []byte slices later on
		for individual tables inside the complete flatbuffers []byte slice.
	*/
	var flatTables *FlatTables
	flatTables, _, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { __b.Fatal(err) }

	{{/* Save .PackageName before it goes out of scope. */}}
	{{- $packageName := .PackageName -}}

	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {

		// "loop" through tables.

		{{- range $tableIndex, $element := .Tables}}
		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name}}

		// table #{{$tableIndex}}

		// Get the []byte flatbuffers slice for this table.
		// {{$packageName}}.{{.Table.Name}}Bytes() is generated by flatbuffers utility flatc (invoked by flattablesc)
		{{.Table.Name|firstCharToLower}}Bytes := flatTables.{{.Table.Name}}Bytes()
		if {{.Table.Name|firstCharToLower}}Bytes == nil { __b.Errorf("{{.Table.Name|firstCharToLower}}Bytes is nil") }

		// Get the {{.Table.Name}} object using code generated by flatc
		// {{$packageName}}.GetRootAs{{.Table.Name}}() is generated by flatbuffers utility flatc (invoked by flattablesc)
	    {{.Table.Name|firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name|firstCharToLower}}Bytes, 0)
		if {{.Table.Name|firstCharToLower}} == nil { __b.Errorf("{{.Table.Name|firstCharToLower}} is nil") }

		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name -}}
		{{range .Cols}}

		for rowIndex := 0; rowIndex < {{$tableName|firstCharToLower}}.RowCount(); rowIndex++ {	// {{.ColType}}
			aVal := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
			_ = aVal	// For compiler.
		}
		{{end}}
		{{end -}}	{{/* end tables */}}
	}
}

func BenchmarkReadDataFromGotables(__b *testing.B) {
	// __b leading underscores to avoid name conflict with generated code.

	var err error

	/* Note:
		The data doesn't have to be read from a file. See func BenchmarkRead() where
		a new TableSet is created and populated from data in memory.
	*/
	var tableSet *gotables.TableSet
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { __b.Error(err) }

	{{/* Save .PackageName before it goes out of scope. */}}
	{{- $packageName := .PackageName -}}

	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {

		// "loop" through tables.

		{{- range $tableIndex, $element := .Tables}}
		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name}}

		// table #{{$tableIndex}}

		{{.Table.Name|firstCharToLower}}, err := tableSet.TableByTableIndex({{$tableIndex}})
		if err != nil { __b.Error(err) }

		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name -}}
		{{range .Cols}}

		for rowIndex := 0; rowIndex < {{$tableName|firstCharToLower}}.RowCount(); rowIndex++ {	// {{.ColType}}
			val, err := {{$tableName|firstCharToLower}}.Get{{.ColType|firstCharToUpper}}("{{.ColName}}", rowIndex)
			_ = val	// For compiler.
			if err != nil { __b.Error(err) }
		}
		{{end}}
		{{end -}}	{{/* end tables */}}
	}
}

func ExampleNewFlatBuffersFromTableSet_roundtrip() {

//	Reading from a file and marshalling to FlatBuffers.

/*
	This is the setup.
	We will use the contents of "{{.GotablesFileName}}"
	A *gotables.TableSet is a set of one or more gotables tables,
	not necessarily stored in a file. See the file we used in the link below:

	This is the default sample gotables file:
	https://github.com/urban-wombat/flattables_sample/blob/master/tables.got
*/
	var tableSetIn *gotables.TableSet
	var err error
	tableSetIn, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { fmt.Println(err) }

/*
	Code in this "{{.NameSpace}}" package is generated by flatc using FlatBuffers
	schema "{{.SchemaFileName}}" which in turn is generated
	by flattablesc from gotables *gotables.TableSet "{{.GotablesFileName}}"

	Converting a set of tables to FlatBuffers is a single function call.
*/

	var flatTables *FlatTables
	var flatBuffers []byte
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSetIn)
	if err != nil { fmt.Println(err) }
	_ = flatTables	// We don't use flatTables.
/*
	flatTables *FlatTables is the binary of the FlatTables root_type in the schema.
	flatBuffers []byte     is the FlatBuffers []byte data for storing/transmitting.

	That's all there is to it.
	You would probably ignore the flatTables variable unless you want to call
	FlatBuffers (flatc generated) code explicitly.
*/

	// Send flatBuffers off to a file or some other process ...

	// We will convert it back to gotables and count the tables.

	tableSetOut, err := NewTableSetFromFlatBuffers(flatBuffers)
	if err != nil { fmt.Println(err) }

	fmt.Println("tableSetIn to flatBuffers to tableSetOut:")
	equals := tableSetIn.TableCount() == tableSetOut.TableCount()
	fmt.Printf("tableSetIn.TableCount() == tableSetOut.TableCount() = %t\n", equals)

	// Output:
	// tableSetIn to flatBuffers to tableSetOut:
	// tableSetIn.TableCount() == tableSetOut.TableCount() = true
}

func ExampleNewFlatBuffersFromTableSet() {

	// Setup. Data to use.

	var tableSetString = `
{{.TableSetData -}}`

	// Setup. Initialise a *TableSet to convert to FlatBuffers.

	var tableSet *gotables.TableSet
	var err error
	tableSet, err = gotables.NewTableSetFromString(tableSetString)
	if err != nil { fmt.Println(err) }

	// Convert to FlatBuffers.

	var flatTables *FlatTables
	var flatBuffers []byte
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { fmt.Println(err) }
	_ = flatTables	// To compile
	_ = flatBuffers	// To compile
}

func ExampleNewTableSetFromFlatBuffers_roundtrip() {
/*
	This is the setup.

	We need to create some FlatBuffers data from which to
	demonstrate converting it back to a gotables TableSet.

	We will use the contents of "{{.GotablesFileName}}"
	A *gotables.TableSet is a set of one or more gotables tables,
	not necessarily stored in a file. See the file we used in the link below:

	This is the default sample gotables file:
	https://github.com/urban-wombat/flattables_sample/blob/master/tables.got
*/
	var tableSetIn *gotables.TableSet
	var err error
	tableSetIn, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { fmt.Println(err) }

/*
	Code in this "{{.NameSpace}}" package is generated by flatc using FlatBuffers
	schema "{{.SchemaFileName}}" which in turn is generated
	by flattablesc from gotables *gotables.TableSet "{{.GotablesFileName}}"

	Converting a set of tables to FlatBuffers is a single function call.
*/
	var flatBuffers []byte
	_, flatBuffers, err = NewFlatBuffersFromTableSet(tableSetIn)
	if err != nil { fmt.Println(err) }
/*
	flatTables *FlatTables is the binary of the FlatTables root_type in the schema.
	                       We don't need FlatTables here. Just FlatBuffers []byte
	flatBuffers []byte     is the FlatBuffers []byte data for storing/transmitting.

	That's all there is to it.
	You would probably ignore the flatTables variable unless you want to call
	FlatBuffers (flatc generated) code explicitly.
*/

	//	Now convert it to GoTables ...
	var tableSetOut *gotables.TableSet
	tableSetOut, err = NewTableSetFromFlatBuffers(flatBuffers)
	if err != nil { fmt.Println(err) }

	// That's it!

	fmt.Println("tableSetIn to flatBuffers to tableSetOut:")
	equals := tableSetIn.TableCount() == tableSetOut.TableCount()
	fmt.Printf("tableSetIn.TableCount() == tableSetOut.TableCount() = %t\n", equals)

	// Output:
	// tableSetIn to flatBuffers to tableSetOut:
	// tableSetIn.TableCount() == tableSetOut.TableCount() = true
}
func ExampleNewTableSetFromFlatBuffers() {

	// Setup. Data to use.

	var tableSetString = `
{{.TableSetData -}}`

	var tableSetIn *gotables.TableSet
	var err error
	tableSetIn, err = gotables.NewTableSetFromString(tableSetString)
	if err != nil { fmt.Println(err) }

	var flatBuffers []byte
	_, flatBuffers, err = NewFlatBuffersFromTableSet(tableSetIn)
	if err != nil { fmt.Println(err) }

	var tableSetOut *gotables.TableSet
	tableSetOut, err = NewTableSetFromFlatBuffers(flatBuffers)
	if err != nil { fmt.Println(err) }
	_ = tableSetOut	// For compiler
}

func ExampleNewSliceFromFlatBuffers_roundtrip() {
/*
	This is the setup.

	We need to create some FlatBuffers data from which to
	demonstrate converting it to a Go slice.

	We will use the contents of "{{.GotablesFileName}}"
	A *gotables.TableSet is a set of one or more gotables tables,
	not necessarily stored in a file. See the file we used in the link below:

	This is the default sample gotables file:
	https://github.com/urban-wombat/flattables_sample/blob/master/tables.got
*/
	var tableSetIn *gotables.TableSet
	var err error
	tableSetIn, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { fmt.Println(err) }

/*
	Code in this "{{.NameSpace}}" package is generated by flatc using FlatBuffers
	schema "{{.SchemaFileName}}" which in turn is generated
	by flattablesc from gotables *gotables.TableSet "{{.GotablesFileName}}"

	Converting a set of tables to FlatBuffers is a single function call.
*/
	var flatBuffersIn []byte
	_, flatBuffersIn, err = NewFlatBuffersFromTableSet(tableSetIn)
	if err != nil { fmt.Println(err) }
/*
	flatTables *FlatTables Is the binary of the FlatTables root_type in the schema.
	                       We don't need FlatTables here. Just FlatBuffers []byte
	flatBuffersIn []byte   Is the FlatBuffers []byte data for storing/transmitting.

	That's all there is to it.
	You would probably ignore the flatTables variable unless you want to call
	FlatBuffers (flatc generated) code explicitly.
*/

/*
	This is what {{.NameSpace}}.RootTableSlice looks like:
	{{range .Tables}}
	type TableSlice_{{.Table.Name}} struct {
	{{range .Cols}}
		{{.ColName|firstCharToUpper}} {{.ColType}}
	{{- end}}
	}
	{{end}}
	
	type RootTableSlice struct {
	{{range .Tables}}
		TableSlice_{{.Table.Name}} []TableSlice_{{.Table.Name}}
	{{- end}}
	}

	It is defined in {{.NameSpace}}.NewSliceFromFlatBuffers()
*/

	//	Now convert it to tables in a struct of Go slices ...
	// Returned newSlices is a struct of type {{.NameSpace}}.RootTableSlice
	// Each field in the struct is a slice of table rows.
	// Defined in {{.NameSpace}}_NewSliceFromFlatBuffers.go
	var newSlices RootTableSlice
	newSlices, err = NewSliceFromFlatBuffers(flatBuffersIn)
	if err != nil { panic(err) }

	// That's it!

	// Just for fun, let's convert it back to FlatBuffers with this newly-minted function.
	_, flatBuffersOut, err := NewFlatBuffersFromSlice(newSlices)
	if err != nil { panic(err) }

	equals := bytes.Equal(flatBuffersIn, flatBuffersOut)
	if !equals { panic(fmt.Sprintf("bytes.Equal(flatBuffersIn, flatBuffersOut) != %t\n", bytes.Equal(flatBuffersIn, flatBuffersOut))) }
	fmt.Printf("bytes.Equal(flatBuffersIn, flatBuffersOut) = %t\n", equals)

	tableCountIn := tableSetIn.TableCount()

	// Count the fields (i.e. tables) in struct newSlices
	newSlicesValue := reflect.ValueOf(newSlices)
	newSlicesCountOut := newSlicesValue.NumField()

	equals = newSlicesCountOut == tableCountIn
	fmt.Printf("(tableCountIn == newSlicesCountOut) = %t\n", equals)

	// Output:
	// bytes.Equal(flatBuffersIn, flatBuffersOut) = true
	// (tableCountIn == newSlicesCountOut) = true
}

func ExampleNewSliceFromFlatBuffers() {

	// Setup. Data to use.

	var tableSetString = `
{{.TableSetData -}}`

	var tableSetIn *gotables.TableSet
	var err error
	tableSetIn, err = gotables.NewTableSetFromString(tableSetString)
	if err != nil { fmt.Println(err) }

/*
	This is what {{.NameSpace}}.RootTableSlice looks like:
	{{range .Tables}}
	type TableSlice_{{.Table.Name}} struct {
	{{range .Cols}}
		{{.ColName|firstCharToUpper}} {{.ColType}}
	{{- end}}
	}
	{{end}}
	
	type RootTableSlice struct {
	{{range .Tables}}
		TableSlice_{{.Table.Name}} []TableSlice_{{.Table.Name}}
	{{- end}}
	}

	It is defined in {{.NameSpace}}.NewSliceFromFlatBuffers()
*/

	var flatBuffersIn []byte
	_, flatBuffersIn, err = NewFlatBuffersFromTableSet(tableSetIn)
	if err != nil { fmt.Println(err) }

	var newSlices RootTableSlice
	newSlices, err = NewSliceFromFlatBuffers(flatBuffersIn)
	if err != nil { panic(err) }
	_ = newSlices	// For compiler
}

func ExampleOldSliceFromFlatBuffers_roundtrip() {
/*
	This is the setup.

	We need to create some FlatBuffers data from which to
	demonstrate converting it to a Go slice.

	We will use the contents of "{{.GotablesFileName}}"
	A *gotables.TableSet is a set of one or more gotables tables,
	not necessarily stored in a file. See the file we used in the link below:

	https://github.com/urban-wombat/flattables_sample/blob/master/tables.got
*/
	var tableSet *gotables.TableSet
	var err error
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { fmt.Println(err) }

/*
	Code in this "{{.NameSpace}}" package is generated by flatc using FlatBuffers
	schema "{{.SchemaFileName}}" which in turn is generated
	by flattablesc from gotables *gotables.TableSet "{{.GotablesFileName}}"

	Converting a set of tables to FlatBuffers is a single function call.
*/
	var flatBuffersIn []byte
	_, flatBuffersIn, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { fmt.Println(err) }
/*
	flatTables *FlatTables is the binary of the FlatTables root_type in the schema.
	                       We don't need FlatTables here. Just FlatBuffers []byte
	flatBuffersIn []byte     is the FlatBuffers []byte data for storing/transmitting.

	That's all there is to it.
	You would probably ignore the flatTables variable unless you want to call
	FlatBuffers (flatc generated) code explicitly.
*/

/*
	This is what {{.NameSpace}}.RootTableSlice looks like:
	{{range .Tables}}
	type TableSlice_{{.Table.Name}} struct {
	{{range .Cols}}
		{{.ColName|firstCharToUpper}} {{.ColType}}
	{{- end}}
	}
	{{end}}
	
	type RootTableSlice struct {
	{{range .Tables}}
		TableSlice_{{.Table.Name}} []TableSlice_{{.Table.Name}}
	{{- end}}
	}

	It is defined in {{.NameSpace}}.NewSliceFromFlatBuffers()
*/

	//	Now convert it to tables in a struct of Go slices ...
	// oldSlices is a struct of type {{.NameSpace}}.RootTableSlice
	// oldSlices isn't returned. You pass its address as an argument.
	// Each field in the struct is a slice of table rows.
	// Defined in {{.NameSpace}}_NewSliceFromFlatBuffers.go
	// See https://github.com/urban-wombat/flattables_sample/blob/master/flattables_sample_NewSliceFromFlatBuffers.go
	var oldSlices RootTableSlice	// This memory is reused. Reallocated if necessary.
	err = OldSliceFromFlatBuffers(&oldSlices, flatBuffersIn)
	if err != nil { panic(err) }

	// That's it!

	// Just for fun, let's convert it back to FlatBuffers with this newly-minted function.
	_, flatBuffersOut, err := NewFlatBuffersFromSlice(oldSlices)
	if err != nil { panic(err) }

	equals := bytes.Equal(flatBuffersIn, flatBuffersOut)
	if !equals { panic(fmt.Sprintf("bytes.Equal(flatBuffersIn, flatBuffersOut) != %t\n", bytes.Equal(flatBuffersIn, flatBuffersOut))) }
	fmt.Printf("bytes.Equal(flatBuffersIn, flatBuffersOut) = %t\n", equals)

	tableCountIn := tableSet.TableCount()

	// Count the fields (i.e. tables) in struct oldSlices
	oldSlicesValue := reflect.ValueOf(oldSlices)
	oldSlicesCountOut := oldSlicesValue.NumField()

	equals = oldSlicesCountOut == tableCountIn
	fmt.Printf("(tableCountIn == oldSlicesCountOut) = %t\n", equals)

	// Output:
	// bytes.Equal(flatBuffersIn, flatBuffersOut) = true
	// (tableCountIn == oldSlicesCountOut) = true
}

func ExampleOldSliceFromFlatBuffers() {

	// Setup. Data to use.

	var tableSetString = `
{{.TableSetData -}}`

	var tableSet *gotables.TableSet
	var err error
	tableSet, err = gotables.NewTableSetFromString(tableSetString)
	if err != nil { fmt.Println(err) }

	var flatBuffersIn []byte
	_, flatBuffersIn, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { fmt.Println(err) }

/*
	This is what {{.NameSpace}}.RootTableSlice looks like:
	{{range .Tables}}
	type TableSlice_{{.Table.Name}} struct {
	{{range .Cols}}
		{{.ColName|firstCharToUpper}} {{.ColType}}
	{{- end}}
	}
	{{end}}
	
	type RootTableSlice struct {
	{{range .Tables}}
		TableSlice_{{.Table.Name}} []TableSlice_{{.Table.Name}}
	{{- end}}
	}

	It is defined in {{.NameSpace}}.NewSliceFromFlatBuffers()
*/

	var oldSlices RootTableSlice	// This memory is reused. Reallocated if necessary.
	err = OldSliceFromFlatBuffers(&oldSlices, flatBuffersIn)
	if err != nil { panic(err) }
}

func ExampleNewFlatBuffersFromSlice_roundtrip() {
	/*
	This is the setup.

	We need to create some FlatBuffers data from which to
	demonstrate converting it to a Go slice.

	We will use the contents of "{{.GotablesFileName}}"
	A *gotables.TableSet is a set of one or more gotables tables,
	not necessarily stored in a file. See the file we used in the link below:

	https://github.com/urban-wombat/flattables_sample/blob/master/tables.got
	*/

	var tableSet1 *gotables.TableSet
	var err error
	tableSet1, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { fmt.Println(err) }

	/*
	Code in this "{{.NameSpace}}" package is generated by flatc using FlatBuffers
	schema "{{.SchemaFileName}}" which in turn is generated
	by flattablesc from gotables *gotables.TableSet "{{.GotablesFileName}}"

	Converting a set of tables to FlatBuffers is a single function call.
	*/

	var flatBuffers1 []byte
	_, flatBuffers1, err = NewFlatBuffersFromTableSet(tableSet1)
	if err != nil { fmt.Println(err) }

	/*
	flatTables *FlatTables is the binary of the FlatTables root_type in the schema.
	                       We don't need FlatTables here. Just FlatBuffers []byte
	flatBuffers1 []byte    is the FlatBuffers []byte data for storing/transmitting.

	That's all there is to it.
	You would probably ignore the flatTables variable unless you want to call
	FlatBuffers (flatc generated) code explicitly.
	*/

/*
	This is what {{.NameSpace}}.RootTableSlice looks like:
	{{range .Tables}}
	type TableSlice_{{.Table.Name}} struct {
	{{range .Cols}}
		{{.ColName|firstCharToUpper}} {{.ColType}}
	{{- end}}
	}
	{{end}}
	
	type RootTableSlice struct {
	{{range .Tables}}
		TableSlice_{{.Table.Name}} []TableSlice_{{.Table.Name}}
	{{- end}}
	}

	It is defined in {{.NameSpace}}.NewSliceFromFlatBuffers()
*/

	// Now convert it to tables in a struct of Go slices ...
	// Returned slices is a struct of type {{.NameSpace}}.RootTableSlice
	// Each field in the struct is a slice of table rows.
	// Defined in {{.NameSpace}}_NewSliceFromFlatBuffers.go
	// See https://github.com/urban-wombat/flattables_sample/blob/master/flattables_sample_NewSliceFromFlatBuffers.go
	var slices RootTableSlice
	slices, err = NewSliceFromFlatBuffers(flatBuffers1)
	if err != nil { panic(err) }

	var flatBuffers2 []byte
	_, flatBuffers2, err = NewFlatBuffersFromSlice(slices)
	if err != nil { panic(err) }

	fmt.Printf("bytes.Equal(flatBuffers1, flatBuffers2) = %t\n", bytes.Equal(flatBuffers1, flatBuffers2))

	// That's it!

	// Output:
	// bytes.Equal(flatBuffers1, flatBuffers2) = true
}

func ExampleNewFlatBuffersFromSlice() {

	// Setup. Data to use.

	var tableSetString = `
{{.TableSetData -}}`

	var tableSet1 *gotables.TableSet
	var err error
	tableSet1, err = gotables.NewTableSetFromString(tableSetString)
	if err != nil { fmt.Println(err) }

	var flatBuffers1 []byte
	_, flatBuffers1, err = NewFlatBuffersFromTableSet(tableSet1)
	if err != nil { fmt.Println(err) }

/*
	This is what {{.NameSpace}}.RootTableSlice looks like:
	{{range .Tables}}
	type TableSlice_{{.Table.Name}} struct {
	{{range .Cols}}
		{{.ColName|firstCharToUpper}} {{.ColType}}
	{{- end}}
	}
	{{end}}
	
	type RootTableSlice struct {
	{{range .Tables}}
		TableSlice_{{.Table.Name}} []TableSlice_{{.Table.Name}}
	{{- end}}
	}

	It is defined in {{.NameSpace}}.NewSliceFromFlatBuffers()
*/

	var slices RootTableSlice
	slices, err = NewSliceFromFlatBuffers(flatBuffers1)
	if err != nil { panic(err) }

	var flatBuffers2 []byte
	_, flatBuffers2, err = NewFlatBuffersFromSlice(slices)
	if err != nil { panic(err) }
	_ = flatBuffers2	// For compiler
}
func BenchmarkNewFlatBuffersFromSlice(__b *testing.B) {

	// Setup. Data to use.

	var tableSetString = `
{{.TableSetData -}}`

	var tableSet1 *gotables.TableSet
	var err error
	tableSet1, err = gotables.NewTableSetFromString(tableSetString)
	if err != nil { __b.Error(err) }

	var flatBuffers1 []byte
	_, flatBuffers1, err = NewFlatBuffersFromTableSet(tableSet1)
	if err != nil { __b.Error(err) }

	var slices RootTableSlice
	slices, err = NewSliceFromFlatBuffers(flatBuffers1)
	if err != nil { __b.Error(err) }

	var flatBuffers2 []byte
	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {
		_, flatBuffers2, err = NewFlatBuffersFromSlice(slices)
		if err != nil { __b.Error(err) }
		_ = flatBuffers2	// For compiler
	}
}

func BenchmarkNewSliceFromFlatBuffers(__b *testing.B) {
	// __b leading underscores to avoid name conflict with generated code.

	var err error

	var tableSet1 *gotables.TableSet
	tableSet1, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { __b.Error(err) }

	var flatBuffers []byte
	_, flatBuffers, err = NewFlatBuffersFromTableSet(tableSet1)
	if err != nil { __b.Error(err) }

	var slices RootTableSlice
	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {
		slices, err = NewSliceFromFlatBuffers(flatBuffers)
		if err != nil { __b.Error(err) }
		_ = slices
	}
}

func BenchmarkOldSliceFromFlatBuffers(__b *testing.B) {
	// __b leading underscores to avoid name conflict with generated code.

	var err error

	var tableSet1 *gotables.TableSet
	tableSet1, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { __b.Error(err) }

	var flatBuffers []byte
	_, flatBuffers, err = NewFlatBuffersFromTableSet(tableSet1)
	if err != nil { __b.Error(err) }

	var slices RootTableSlice
	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {
		err = OldSliceFromFlatBuffers(&slices, flatBuffers)
		if err != nil { __b.Error(err) }
		_ = slices
	}
}
