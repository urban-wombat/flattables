package {{.NameSpace}}

/*
	{{.GeneratedFile}}
	DO NOT MODIFY
	{{.GeneratedDateFromFile}}
	{{.UsingCommand}}
*/

import (
	{{range .Imports}}
	{{- .}}
	{{end}}
)

/*
Copyright (c) {{"2017"|yearRangeFromFirstYear}} Malcolm Gorman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var where func(...interface {})

func TestNewFlatBuffersFromTableSet(t *testing.T) {
	var err error

	// This reads and parses tables from file "{{.GotablesFileName}}" into a gotables TableSet object.
	var tableSet *gotables.TableSet
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { t.Error(err) }

	/*
		Note:
		We discard the complete flatbuffers []byte slice here, using blank _
		We would use it if we wanted to transmit it or save it to file.
		We use the flatTables object to obtain flatbuffers []byte slices later on
		for individual tables inside the complete flatbuffers []byte slice.
		This transforms the gotables TableSet object into a FlatTables object.
	*/
	var flatTables *FlatTables
	var flatBuffers []byte
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { t.Fatal(err) }
	_ = flatBuffers	// Discard. In practice you might save or transmit the FlatBuffers objects.

	{{/* Save .PackageName before it goes out of scope. */}}
	{{- $packageName := .PackageName -}}

	{{/* Save .GotablesFileName before it goes out of scope. */}}
	{{- $gotablesFileName := .GotablesFileName -}}

	// "loop" through tables.

	var table *gotables.Table
	var rowCount int
	var childLength int

	{{- range $tableIndex, $element := .Tables}}
	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name}}

	// table #{{$tableIndex}}

	// Get the *gotables.Table object of this table (originally from gotables file "{{$gotablesFileName}}").
	table, err = tableSet.TableByTableIndex({{$tableIndex}})
	if err != nil { t.Error(err) }

	// Get the []byte flatbuffers slice for this table.
	// {{$packageName}}.{{.Table.Name}}Bytes() is generated by flatbuffers utility flatc (invoked by flattablesc)
	{{.Table.Name|firstCharToLower}}Bytes := flatTables.{{.Table.Name}}Bytes()
	if {{.Table.Name|firstCharToLower}}Bytes == nil { t.Errorf("{{.Table.Name|firstCharToLower}}Bytes is nil") }

	// Get the {{.Table.Name}} object using code generated by flatc
	// {{$packageName}}.GetRootAs{{.Table.Name}}() is generated by flatbuffers utility flatc (invoked by flattablesc)
    {{.Table.Name|firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name|firstCharToLower}}Bytes, 0)
	if {{.Table.Name|firstCharToLower}} == nil { t.Errorf("{{.Table.Name|firstCharToLower}} is nil") }

	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name}}

	rowCount = table.RowCount()
	{{range .Cols}}
	childLength = {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}Length()
	if childLength != rowCount {
		t.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName|firstCharToUpper}}Length() %d != {{$tableName}}.RowCount() %d",
			"{{$tableName}}", childLength, rowCount)
	}

	for rowIndex := 0; rowIndex < table.RowCount(); rowIndex++ {
		cell, err := table.Get{{.ColType|firstCharToUpper}}("{{.ColName}}", rowIndex)
		if err != nil { t.Error(err) }

		{{- if .IsString}}
		{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
		if string({{.ColName}}) != cell { t.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %q != gotables [%s].%s[%d] %q",
			"{{$tableName}}", rowIndex, string({{.ColName}}), "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
		// println(cell)
		{{else if .IsScalar}}
		{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
		// println(cell)
		{{- if .IsBool}}
		// Inline conversion of FlatBuffers byte to Go bool: ({{.ColName}} != 0)
		if ({{.ColName}} != 0) != cell { t.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %v != gotables [%s].%s[%d] %v",
			"{{$tableName}}", rowIndex, byteToBool({{.ColName}}), "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
		{{else}}
		if {{.ColName}} != cell { t.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %v != gotables [%s].%s[%d] %v",
			"{{$tableName}}", rowIndex, {{.ColName}}, "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
		{{end}}
		{{else}}
		t.Errorf("Unimplemented col type: %s", {{.ColType}})
		{{end}}
	}
	{{end}}

	{{end -}}	{{/* end tables */}}
}

func TestNewTableSetFromFlatBuffers(t *testing.T) {
	var err error

	// Get the data from the source gotables file and parse it into a TableSet.
	var tableSetGotables *gotables.TableSet
	tableSetGotables, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { t.Error(err) }

	// Convert the data to FlatBuffers.
	var flatTables *FlatTables
	var flatBuffers []byte
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSetGotables)
	if err != nil { t.Fatal(err) }
	_ = flatTables	// We don't need it here. Included for illustration.

	/*
		Here is the gap where flatBuffers, which is the FlatBuffers []byte array,
		might have been transmitted as a message or to a file.
	*/

	// Convert the FlatBuffers data back to a gotables TableSet.
	var tableSetFlatBuffers *gotables.TableSet
	tableSetFlatBuffers, err = NewTableSetFromFlatBuffers(flatBuffers)
	if err != nil { t.Error(err) }

	// This is essentially the body of the TableSet.Equals() method.
	if tableSetFlatBuffers.TableCount() != tableSetGotables.TableCount() {
		t.Errorf("FlatBuffers TableCount() %d != gotables TableCount() %d",
		tableSetFlatBuffers.TableCount(), tableSetGotables.TableCount())
	}

	for tableIndex := 0; tableIndex < tableSetGotables.TableCount(); tableIndex++ {
		tableGotables, err := tableSetGotables.TableByTableIndex(tableIndex)
		if err != nil { t.Error(err) }

		tableFlatBuffers, err := tableSetFlatBuffers.TableByTableIndex(tableIndex)
		if err != nil { t.Error(err) }

		equals, err := tableGotables.Equals(tableFlatBuffers)
		if !equals {
			// This is a diagnostic output so we can immediately see what might have gone wrong.
			t.Log(fmt.Sprintf("ERROR COMPARING...\n\ntableFlatBuffers:\n%s\n...WITH...\n\n%s:\n%s",
				tableFlatBuffers, "tableGotables", tableGotables))
		}
		if err != nil { t.Fatal("gotables != FlatBuffers: " + err.Error()) }
	}
}

func BenchmarkGetAndCompareFlatBuffersObjectsWithEquivalentGotablesObjects(__b *testing.B) {
	// __b leading underscores to avoid name conflict with generated code.

	var err error

	// Marshall gotables tables from "{{.GotablesFileName}}" to *gotables.TableSet
	var tableSet *gotables.TableSet
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { __b.Error(err) }

	// Marshall *FlatTables and FlatBuffers from *gotables.TableSet
	var flatTables *FlatTables
	var flatBuffers []byte
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { __b.Fatal(err) }
	_ = flatBuffers

	{{/* Save .PackageName before it goes out of scope. */}}
	{{- $packageName := .PackageName -}}

	// The benchmark is purely retrieval (from objects) and comparison. There is no marshalling here.

	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {

		// "loop" through tables.

		var table *gotables.Table

		{{- range $tableIndex, $element := .Tables}}
		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name}}

		// table #{{$tableIndex}}

		// Get the *gotables.Table object of this table (originally from "{{$gotablesFileName}}").
		table, err = tableSet.TableByTableIndex({{$tableIndex}})
		if err != nil { __b.Error(err) }

		// Get the []byte flatbuffers slice for this table.
		// {{$packageName}}.{{.Table.Name}}Bytes() is generated by flatbuffers utility flatc (invoked by flattablesc)
		{{.Table.Name|firstCharToLower}}Bytes := flatTables.{{.Table.Name}}Bytes()
		if {{.Table.Name|firstCharToLower}}Bytes == nil { __b.Errorf("{{.Table.Name|firstCharToLower}}Bytes is nil") }

		// Get the {{.Table.Name}} object using code generated by flatc
		// {{$packageName}}.GetRootAs{{.Table.Name}}() is generated by flatbuffers utility flatc (invoked by flattablesc)
	    {{.Table.Name|firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name|firstCharToLower}}Bytes, 0)
		if {{.Table.Name|firstCharToLower}} == nil { __b.Errorf("{{.Table.Name|firstCharToLower}} is nil") }

		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name}}

		{{range .Cols}}
		// Retrieve each corresponding value from gotables table and FlatBuffers table and compare them.
		for rowIndex := 0; rowIndex < table.RowCount(); rowIndex++ {
			cell, err := table.Get{{.ColType|firstCharToUpper}}("{{.ColName}}", rowIndex)
			if err != nil { __b.Error(err) }

			{{- if .IsString}}
			{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
			if string({{.ColName}}) != cell { __b.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %q != gotables [%s].%s[%d] %q",
				"{{$tableName}}", rowIndex, string({{.ColName}}), "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
			{{else if .IsScalar}}
			{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
			{{- if .IsBool}}
			// Inline conversion of FlatBuffers byte to Go bool: ({{.ColName}} != 0)
			if ({{.ColName}} != 0) != cell { __b.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %v != gotables [%s].%s[%d] %v",
				"{{$tableName}}", rowIndex, byteToBool({{.ColName}}), "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
			{{else}}
			if {{.ColName}} != cell { __b.Errorf("flatbuffers {{$packageName}}.%s.{{.ColName}}[%d] %v != gotables [%s].%s[%d] %v",
				"{{$tableName}}", rowIndex, {{.ColName}}, "{{$tableName}}", "{{.ColName}}", rowIndex, cell) }
			{{end}}
			{{else}}
			__b.Errorf("Unimplemented col type: %s", {{.ColType}})
			{{end}}
		}
		{{end}}

		{{end -}}	{{/* end tables */}}
	}
}

func BenchmarkWrite(__b *testing.B) {
	var err error

	{{range $tableIndex, $table := .Tables}}

	type {{$table.TableName}} struct {
	{{- range .Cols}}
		{{.ColName}} {{.ColType -}}
	{{end}}
	}

	var {{$table.TableName|firstCharToLower}} = []{{$table.TableName}} {
	{{range $rowIndex, $row := .Rows -}}
		{{print "\t"}}{ {{range $colIndex, $cell := $row -}}
		{{index $table.ColNames $colIndex}}:{{$cell}},{{print " " -}}
	{{end}}},
	{{end}}
	}

	var {{$table.TableName|firstCharToLower}}ColNames = []string { {{range $colIndex, $colName := $table.ColNames -}}
		"{{$colName -}}",{{print " "}}
	{{- end}}}
	var {{$table.TableName|firstCharToLower}}ColTypes = []string { {{range $colIndex, $colType := $table.ColTypes -}}
		"{{$colType -}}",{{print " "}}
	{{- end}}}

	{{end}}


	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {

		var tableSet *gotables.TableSet
		tableSet, err = gotables.NewTableSet("MyTableSet")
		if err != nil { __b.Error(err) }

		{{range $tableIndex, $table := .Tables}}
		{
			var {{$table.TableName|firstCharToLower}}Table *gotables.Table
			{{$table.TableName|firstCharToLower}}Table, err = gotables.NewTableFromMetadata("{{$table.TableName}}", {{$table.TableName|firstCharToLower}}ColNames, {{$table.TableName|firstCharToLower}}ColTypes)
			if err != nil { __b.Error(err) }

/*			Isn't any faster than individual calls to AppendRow(). AppendRows() needs tuning?
			err = {{$table.TableName|firstCharToLower}}Table.AppendRows(len({{$table.TableName|firstCharToLower}}))
			if err != nil { __b.Error(err) }
*/

			for rowIndex := 0; rowIndex < len({{$table.TableName|firstCharToLower}}); rowIndex++ {
				err = {{$table.TableName|firstCharToLower}}Table.AppendRow()
				if err != nil { __b.Error(err) }

				{{- range $table.Cols}}

				err = {{$table.TableName|firstCharToLower}}Table.Set{{.ColType|firstCharToUpper}}("{{.ColName}}", rowIndex, {{$table.TableName|firstCharToLower}}[rowIndex].{{.ColName}})
				if err != nil { __b.Error(err) }
				{{- end}}
			}

			err = tableSet.AppendTable({{$table.TableName|firstCharToLower}}Table)
			if err != nil { __b.Error(err) }
		}
		{{end}}

		var flatTables *FlatTables
		flatTables, _, err = NewFlatBuffersFromTableSet(tableSet)
		if err != nil { __b.Fatal(err) }
		flatTables = flatTables	// To get past compiler.
	}
}

func BenchmarkRead(__b *testing.B) {
	// __b leading underscores to avoid name conflict with generated code.

	var err error

	/* Note:
		The data doesn't have to be read from a file. See func BenchmarkRead() where
		a new TableSet is created and populated from data in memory.
	*/
	var tableSet *gotables.TableSet
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { __b.Error(err) }

	/*
		Note:
		We discard the complete flatbuffers []byte slice here, using blank _
		We would use it if we wanted to transmit it or save it to file.
		We use the flatTables object to obtain flatbuffers []byte slices later on
		for individual tables inside the complete flatbuffers []byte slice.
	*/
	var flatTables *FlatTables
	flatTables, _, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { __b.Fatal(err) }

	{{/* Save .PackageName before it goes out of scope. */}}
	{{- $packageName := .PackageName -}}

	// Begin benchmark ...
	for i := 0; i < __b.N; i++ {

		// "loop" through tables.

		{{- range $tableIndex, $element := .Tables}}
		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name}}

		// table #{{$tableIndex}}

		// Get the []byte flatbuffers slice for this table.
		// {{$packageName}}.{{.Table.Name}}Bytes() is generated by flatbuffers utility flatc (invoked by flattablesc)
		{{.Table.Name|firstCharToLower}}Bytes := flatTables.{{.Table.Name}}Bytes()
		if {{.Table.Name|firstCharToLower}}Bytes == nil { __b.Errorf("{{.Table.Name|firstCharToLower}}Bytes is nil") }

		// Get the {{.Table.Name}} object using code generated by flatc
		// {{$packageName}}.GetRootAs{{.Table.Name}}() is generated by flatbuffers utility flatc (invoked by flattablesc)
	    {{.Table.Name|firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name|firstCharToLower}}Bytes, 0)
		if {{.Table.Name|firstCharToLower}} == nil { __b.Errorf("{{.Table.Name|firstCharToLower}} is nil") }

		{{/* Save .Table.Name before it goes out of scope. */}}
		{{$tableName := .Table.Name -}}
		{{range .Cols}}

// HERE
		for rowIndex := 0; rowIndex < {{$tableName|firstCharToLower}}.RowCount(); rowIndex++ {	// {{.ColType}}
{{/*
// fmt.Printf("rowIndex = %d\n", rowIndex)
			{{- if .IsString}}
			aVal := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
			aVal = aVal	// For compiler.
gotables.PrintStderr(fmt.Sprintf(".IsString: %v\n", aVal))
			{{- else if .IsScalar}}
			aVal := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
			aVal = aVal	// For compiler.
gotables.PrintStderr(fmt.Sprintf(".IsScalar: %v\n", aVal))
			{{- else}}
			__b.Errorf("Unimplemented col type: %s", {{.ColType}})
			{{end}}
*/}}
			aVal := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
			_ = aVal	// For compiler.
// fmt.Printf("value = %v\n", aVal)
		}
		{{end}}
		{{end -}}	{{/* end tables */}}
	}
}

func ExampleNewFlatBuffersFromTableSet() {

	// For brevity here we will use the contents of {{.GotablesFileName}}
	// (Another example uses freshly-created data, which is more realistic.)

	var tableSet *gotables.TableSet	// A set of one or more gotables tables.
	var err error
	tableSet, err = gotables.NewTableSetFromFile("{{.GotablesFileName}}")
	if err != nil { log.Println(err) }

	var flatTables *FlatTables	// The binary of FlatTables root_type in schema {{.SchemaFileName}}
	var flatBuffers []byte		// The FlatBuffers []byte date for storing or transmitting.
	flatTables, flatBuffers, err = NewFlatBuffersFromTableSet(tableSet)
	if err != nil { log.Println(err) }

	tableSetString := fmt.Sprintf("%s", tableSet.String())
	flatTablesString := fmt.Sprintf("%#v", flatTables)
	flatBuffersString := fmt.Sprintf("%#v", flatBuffers)

	fmt.Printf("len(tableSet)    = %4d\n", len(tableSetString))
	fmt.Printf("len(flatTables)  = %4d\n", len(flatTablesString))
	fmt.Printf("len(flatBuffers) = %4d\n", len(flatBuffersString))

	// Output:
	// len(tableSet)    =  691
	// len(flatTables)  = 3224
	// len(flatBuffers) = 3152
}
