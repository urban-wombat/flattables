package {{.PackageName}}

/*
	{{.FlatTablesCodeFileName}}
	DO NOT MODIFY
	{{.AutomaticallyFrom}}
*/

import (
	{{range .Imports}}
	{{- .}}
	{{end}}
)

func init() {
	log.SetFlags(log.Lshortfile)
}
var where = log.Print

func FlatBuffersFromTableSet(tableSet *gotables.TableSet) (flatBuffers []byte, err error) {
	if tableSet == nil {
		return nil, fmt.Errorf("tableSet.%s() tableSet is <nil>", funcName())
	}

	// Create FlatBuffers builder
	const initialSize = 0
	builder := flatbuffers.NewBuilder(initialSize)
	if builder == nil {
		return nil, fmt.Errorf("Could not create FlatBuffers builder") 
	}

	builder.Reset()
	{{$packageName := .PackageName}}
	var position flatbuffers.UOffsetT
	var table *gotables.Table
	{{range $tableIndex, $element := .Tables}}

	{	// Begin anonymous block per table. Provides separate scope for each set of col names.

		table, err = tableSet.Table("{{.Table.Name}}")
		if err != nil { return nil, err }

		{{$tableName := .Table.Name}}

	// Create each child.
	{{range .Cols}}
		// Create child: {{.ColName | firstCharToUpper}}
		{{$tableName}}Start{{.ColName | firstCharToUpper}}Vector(builder, table.RowCount())
		for rowIndex := table.RowCount()-1; rowIndex >= 0; rowIndex-- {
			val, err := table.Get{{.ColType | firstCharToUpper}}("{{.ColName}}", rowIndex)
			if err != nil { return nil, err }

			builder.Prepend{{.ColType | firstCharToUpper}}(val)
		}
		{{.ColName}}Vector := builder.EndVector(table.RowCount())
	{{end}}

	// Start FlatBuffers table.
	{{$tableName}}Start(builder)

	// Add each child to the table: {{$tableName}}
	{{range .Cols}}
	// Add child: {{.ColName | firstCharToUpper}} 
	{{$tableName}}Add{{.ColName | firstCharToUpper}}(builder, {{.ColName}}Vector)
	{{end}}

	// End FlatBuffers table.
	position = {{$tableName}}End(builder)

	}	// End anonymous block per table.

	{{end}}	// End tableSet loop

	builder.Finish(position)
	flatBuffers = builder.FinishedBytes()

	return flatBuffers, nil
}

func funcName() string {
	pc, _, _, _ := runtime.Caller(1)
	nameFull := runtime.FuncForPC(pc).Name() // main.foo
	nameEnd := filepath.Ext(nameFull)        // .foo
	name := strings.TrimPrefix(nameEnd, ".") // foo
	return name
}
