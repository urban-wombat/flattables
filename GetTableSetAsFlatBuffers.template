package {{.PackageName}}

/*
	{{.FlatTablesCodeFileName}}
	DO NOT MODIFY
	{{.AutomaticallyFrom}}
*/

import (
	{{range .Imports}}
	{{- .}}
	{{end}}
)

func GetTableSetAsFlatBuffers(tableSet *gotables.TableSet) ([]byte, error) {
	if tableSet == nil {
		return nil, fmt.Errorf("tableSet.%s() tableSet is <nil>", funcName())
	}

	var flatBuffersBytes []byte

//	fmt.Println("inside GetTableSetAsFlatBuffers()")
//	fmt.Println(tableSet)

	// Create FlatBuffers builder
	const initialSize = 0
	builder := flatbuffers.NewBuilder(initialSize)
	if builder == nil {
		return nil, fmt.Errorf("Could not create FlatBuffers builder") 
	}

	builder.Reset()
	{{$packageName := .PackageName}}
	for tableIndex := 0; tableIndex < tableSet.TableCount(); tableIndex++ {
	{{range .Tables}}

		table, err := tableSet.TableByTableIndex(tableIndex)
		if err != nil { return nil, err }

		{{.Table.Name}}Start(builder)
		{{$tableName := .Table.Name}}

	{{range .Cols}}
		// Add child: {{.ColName | firstCharToUpper}}
		{{$tableName}}Start{{.ColName | firstCharToUpper}}Vector(builder, table.RowCount())
		for i := table.RowCount()-1; i >= 0; i-- {
			cell, err := table.Get{{.ColType | firstCharToUpper}}("{{.ColName}}", i)
			if err != nil { return nil, err }

			builder.Prepend{{.ColType | firstCharToUpper}}({{.ColName}})
		}
		{{$tableName}}Add{{.ColName | firstCharToUpper}}(builder, leadVector)
	{{end}}
	position := {{$packageName}}.{{.Table.Name}}End(builder)

	{{end}}

	}	// End tableSet loop

	// Is it the final value of position? Maybe.
	builder.Finish(position)

	return flatBuffersBytes, nil
}

func funcName() string {
	pc, _, _, _ := runtime.Caller(1)
	nameFull := runtime.FuncForPC(pc).Name() // main.foo
	nameEnd := filepath.Ext(nameFull)        // .foo
	name := strings.TrimPrefix(nameEnd, ".") // foo
	return name
}
