package {{.NameSpace}}

/*
	{{.GeneratedFile}}
	DO NOT MODIFY
	{{.GeneratedDateFromFile}}
	{{.UsingCommand}}
*/

import (
	{{range .Imports}}
	{{- .}}
	{{end}}
)

/*
Copyright (c) {{"2018"|yearRangeFromFirstYear}} Malcolm Gorman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

func init() {
	log.SetFlags(log.Lshortfile)
}


// Note: These type definitions may be shared by other functions.

{{range .Tables}}
// Note: Because {{.Table.Name}} is already defined in {{.Table.Name}}.go generated by flatc,
//       for uniqueness and clarity {{.Table.Name}} is prepended with TableArray_ hence TableArray_{{.Table.Name}}
type TableArray_{{.Table.Name}} struct {
{{range .Cols}}
	{{.ColName|firstCharToUpper}} {{.ColType}}
{{- end}}
}
{{end}}

// The array sizes are set by the number of rows in each table in {{.GeneratedFromFile}}
type RootTableArray struct {
{{range .Tables}}
	TableArray_{{.Table.Name}} [{{.Table.RowCount}}]TableArray_{{.Table.Name}}
{{- end}}
}

var Arrays RootTableArray

/*
	This function {{.FuncName}}() is generated by flattablesc

	Pass in Arrays RootTableArray to hold the data. Avoids memory allocation using slices.
*/
func NewArrayFromFlatBuffers(flatBuffers []byte, Arrays *RootTableArray) error {
	if flatBuffers == nil {
		return fmt.Errorf("table.%s() flatBuffers []byte is <nil>", funcName())
	}
	if len(flatBuffers) == 0 {
		return fmt.Errorf("table.%s() len(flatBuffers) []byte = 0", funcName())
	}

	// Get the FlatTables object (which has all the data tables) from the flatBuffers []byte vector.
	flatTables := GetRootAsFlatTables(flatBuffers, 0)

	const uninitialisedLength = -1
	var childLength int
	var prevChildLength int

	{{range $tableIndex, $element := .Tables}}
	{{$tableName := .Table.Name}}
	{{$table := .Table}}
	// Table #{{$tableIndex}} TableArray_{{.Table.Name}}

	// Get the FlatBuffers bytes specific to table {{.Table.Name}}
	{{.Table.Name}}Bytes := flatTables.{{.Table.Name}}Bytes()
	if {{.Table.Name}}Bytes == nil { return fmt.Errorf("{{.Table.Name}}Bytes is nil") }

	// Get the FlatBuffers {{.Table.Name}} object from its FlatBuffers bytes.
	{{.Table.Name|firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name}}Bytes, 0)
	if {{.Table.Name|firstCharToLower}} == nil {
		return fmt.Errorf("{{.Table.Name}} is nil")
	}

	// Check that all child vectors of {{.Table.Name}} have the same and correct length.
	// This will always be true if created from gotables, but maybe not if done by hand.
	childLength = uninitialisedLength
	prevChildLength = uninitialisedLength

	{{range .Cols}}
	childLength = {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}Length()
	if prevChildLength == uninitialisedLength {
		//  Skip first col. No previous child length to compare.
	} else if childLength != prevChildLength {
		return fmt.Errorf("{{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}Length() %d != prev %d",
			childLength, prevChildLength)
	}
	prevChildLength = childLength

	// Populate table slice Table{{$table.Name}} column {{.ColName}} from FlatBuffers table child vector {{.ColName}}.
	for rowIndex := 0; rowIndex < childLength; rowIndex++ {
		// Get the {{.ColName}} cell value from FlatBuffers and
		// set the corresponding {{.ColName}} cell value in Table{{$table.Name}}.{{.ColName|firstCharToUpper}}[rowIndex]
		{{.ColName}} := {{$tableName|firstCharToLower}}.{{.ColName|firstCharToUpper}}(rowIndex)
		{{- if .IsString}}
		// FlatBuffers stores strings as []byte arrays. Convert {{.ColName}} []byte to string.
		Arrays.TableArray_{{$table.Name}}[rowIndex].{{.ColName|firstCharToUpper}} = string({{.ColName}})
		{{else if .IsScalar}}
		{{- if .IsBool}}
		// FlatBuffers stores bools as bytes. Convert {{.ColName}} byte to bool.
		Arrays.TableArray_{{$table.Name}}[rowIndex].{{.ColName|firstCharToUpper}} = {{.ColName}} != 0
		{{else}}
		Arrays.TableArray_{{$table.Name}}[rowIndex].{{.ColName|firstCharToUpper}} = {{.ColName}}
		{{end}}
		{{else}}
		return fmt.Errorf("Unimplemented col type: %s", {{.ColType}})
		{{end}}
	}

	{{end}}
{{end}}

	return nil
}
