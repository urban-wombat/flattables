package {{.NameSpace}}

/*
	{{.GeneratedFile}}
	DO NOT MODIFY
	{{.GeneratedDateFromFile}}
	{{.UsingCommand -}}
*/

import (
	{{range .Imports}}
	{{- .}}
	{{end}}
)

/*
Copyright (c) {{"2017"|yearRangeFromFirstYear}} Malcolm Gorman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/*
	This function {{.FuncName}}() is generated automatically by flattablesc
*/
func NewFlatBuffersFromSlice(slices RootTableSlice) (flatTables *FlatTables, flatBuffers []byte, err error) {
	// We can't easily check here whether slices is empty without essentially implementing the entire function.

	const initialSize = 0
	builder := flatbuffers.NewBuilder(initialSize)
	if builder == nil {
		return nil, nil, fmt.Errorf("Could not create FlatBuffers builder") 
	}

	// Make slice of []byte buffers for each of the {{len .Tables}} table slices in RootTableSlice
	var buffers = make([][]byte, {{len .Tables}}) // For all the tables.

	// Call each function to get its FlatBuffers buffer.

	{{range $tableIndex, $element := .Tables}}
	// Get {{.Table.Name}} as FlatBuffers from slices.TableSlice_{{.Table.Name}}

	// Convert it to flatbuffers.
	_, buffers[{{$tableIndex}}], err = {{.Table.Name}}FlatBuffersFromSlice(slices.TableSlice_{{.Table.Name}})
	if err != nil { return nil, nil, err }
	{{end}}	{{/* end tables */}}

	// Now populate FlatTables

	var offsets []flatbuffers.UOffsetT = make([]flatbuffers.UOffsetT, {{len .Tables}})

	{{range $tableIndex, $element := .Tables -}}
	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name}}

	// Populate FlatTables with table {{.Table.Name}}
	offsets[{{$tableIndex}}] = builder.CreateByteVector(buffers[{{$tableIndex}}])
	{{end}}

	FlatTablesStart(builder)

	{{range $tableIndex, $element := .Tables -}}
	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name -}}
	FlatTablesAdd{{.Table.Name}}(builder, offsets[{{$tableIndex}}])
	{{- end}}

	var offset flatbuffers.UOffsetT = FlatTablesEnd(builder)

	builder.Finish(offset)
	flatBuffers = builder.FinishedBytes()

	flatTables = GetRootAsFlatTables(flatBuffers, 0)

	return
}

{{/* Write a separate function for each FlatBuffers table. */}}
{{range $tableIndex, $element := .Tables}}
{{/* Save .Table.Name before it goes out of scope. */}}
{{$tableName := .Table.Name}}
{{$table := .Table}}
func {{.Table.Name}}FlatBuffersFromSlice(slice []TableSlice_{{.Table.Name}}) (flatTables *{{.Table.Name}}, flatBuffers []byte, err error) {

	const initialSize = 0
	builderLocal := flatbuffers.NewBuilder(initialSize)
	if builderLocal == nil {
		return nil, nil, fmt.Errorf("Could not create FlatBuffers builderLocal for table {{.Table.Name}}") 
	}

	// Create each flatbuffers table child (gotables.Table column).

	{{range .Cols}}
	var {{.ColName}}Vector flatbuffers.UOffsetT
	{{- end}}

	{{range .Cols}}
	// Create child: {{.ColName}}


	{{if .IsScalar}}	{{/* FlatBuffers Scalar includes bool */}}

	{{$tableName}}Start{{.ColName | firstCharToUpper}}Vector(builderLocal, len(slice))
	for rowIndex := len(slice)-1; rowIndex >= 0; rowIndex-- {
		cell := slice[rowIndex].{{.ColName|firstCharToUpper}}

		// Prepend scalar value.
		builderLocal.Prepend{{if .IsScalar}}{{.ColType|firstCharToUpper}}(cell){{else}}UOffsetT({{.ColName}}Vector){{end}}
	}
	{{.ColName}}Vector = builderLocal.EndVector(len(slice))

	{{else if .IsString}}

	// Type {{.ColType}} is a vector.
	// Create {{.ColType}} vector outside {{$tableName}}Start{{.ColName | firstCharToUpper}}Vector() to avoid nesting error.
	{{.ColName}}Offsets := make([]flatbuffers.UOffsetT, len(slice))
	for rowIndex := 0; rowIndex < len(slice); rowIndex++ {
		cell := slice[rowIndex].{{.ColName|firstCharToUpper}}

		{{.ColName}}Offsets[rowIndex] = builderLocal.CreateString(cell)
	}

	// Now prepend the offsets (which are scalar).

	{{$tableName}}Start{{.ColName | firstCharToUpper}}Vector(builderLocal, len(slice))
	for rowIndex := len(slice)-1; rowIndex >= 0; rowIndex-- {
		builderLocal.PrependUOffsetT({{.ColName}}Offsets[rowIndex])
	}
	{{.ColName}}Vector = builderLocal.EndVector(len(slice))

	{{- else}}
	return nil, nil, fmt.Errorf("Unimplemented col type: %s", {{.ColType}})
	{{end}}	{{/* end if scalar */}}

	{{end}}	{{/* end range cols */}}

	// Start FlatBuffers table: {{.Table.Name}}
	{{.Table.Name}}Start(builderLocal)

	// Add each child to the table: {{.Table.Name}}
	{{- range .Cols}}
	{{$tableName}}Add{{.ColName | firstCharToUpper}}(builderLocal, {{.ColName}}Vector)
	{{- end}}

	// End FlatBuffers table: {{.Table.Name}}
	var offset flatbuffers.UOffsetT = {{.Table.Name}}End(builderLocal)
	builderLocal.Finish(offset)

	// Return values.
	flatBuffers = builderLocal.FinishedBytes()
	flatTables = GetRootAs{{.Table.Name}}(flatBuffers, 0)

	return
}
{{end}} {{/* end range Tables */}}
