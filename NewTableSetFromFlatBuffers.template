package {{.PackageName}}

/*
	{{.FromFbCodeFileName}}
	DO NOT MODIFY
	{{.GeneratedFrom}}
	{{.UsingCommand}}
*/

import (
	{{range .FromFbImports}}
	{{- .}}
	{{end}}
)

/*
Copyright (c) {{.Year}} Malcolm Gorman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

func init() {
	log.SetFlags(log.Lshortfile)
}


/*
	This function NewTableSetFromFlatBuffers() is generated by github.com/urban-wombat/gotablesutils/gotflat

	You must first run gotflat (means: gotables FlatTables) pass it -f <gotables-file> and specify -n <namespace>.
	Go package dir <namespace> will be created. All flatbuffers flatc and flattables generated code will land in dir <namespace>.
    Utility gotflat creates schema file <namespace>.fbs, and a custom set of functions in a file named <namespace>_flattables.go.
	Utility goft generates everything you need. It relies on flatc being installed, which it calls.
*/
func NewTableSetFromFlatBuffers(flatBuffers []byte) (tableSet *gotables.TableSet, err error) {
	if flatBuffers == nil {
		return nil, fmt.Errorf("table.%s() flatBuffers []byte is <nil>", funcName())
	}
	if len(flatBuffers) == 0 {
		return nil, fmt.Errorf("table.%s() len(flatBuffers) []byte is 0", funcName())
	}

	// Use a stripped down set of tables as a kind of metadata schema.
	// This is the source gotables tables stripped of any data, for simplicity.
	// Each table is set to "struct" shape (rotated right) for easy human readability.
	var tableSetMetadata = `
{{.TableSetMetadata -}}`

	if len(tableSetMetadata) == 0 {
		return nil, fmt.Errorf("table.%s() len(tableSetMetadata) string is 0", funcName())
	}

	// Initialise this tableSet to metadata-only tables.
	tableSet, err = gotables.NewTableSetFromString(tableSetMetadata)
	if err != nil { return nil, err }

	// Get the FlatTables object (which contains all the data tables) from the flatBuffers []byte vector.
	flatTables := GetRootAsFlatTables(flatBuffers, 0)

	var table *gotables.Table
	const uninitialisedLength = -1
	var childLength int
	var prevChildLength int
	{{range $tableIndex, $element := .Tables}}
	{{$tableName := .Table.Name}}
	// Table #{{$tableIndex}} {{.Table.Name}}

	// Get the metadata-only gotable table {{.Table.Name}} ready for populating.
	table, err = tableSet.TableByTableIndex({{$tableIndex}})
	if err != nil { return nil, err }

	// Get the FlatBuffers bytes specific to table {{.Table.Name}}.
	{{.Table.Name}}Bytes := flatTables.{{.Table.Name}}Bytes()
	if {{.Table.Name}}Bytes == nil { return nil, fmt.Errorf("{{.Table.Name}}Bytes is nil") }

	// Get the FlatBuffers {{.Table.Name}} object from its FlatBuffers bytes.
	{{.Table.Name | firstCharToLower}} := GetRootAs{{.Table.Name}}({{.Table.Name}}Bytes, 0)
	if {{.Table.Name | firstCharToLower}} == nil {
		return nil, fmt.Errorf("{{.Table.Name}} is nil")
	}

	// Check that all child vectors of {{.Table.Name}} have the same and correct length.
	// This will always be true if created from gotables, but maybe not if done by hand.
	childLength = uninitialisedLength
	prevChildLength = uninitialisedLength

	{{range .Cols}}
	childLength = {{$tableName | firstCharToLower}}.{{.ColName | firstCharToUpper}}Length()
	if prevChildLength == uninitialisedLength {
		// If first child, then append uninitialised rows to gotables table ready for populating. Only once per table.
		err = table.AppendRows(childLength)
		if err != nil { return nil, err }
	} else if childLength != prevChildLength {
		return nil, fmt.Errorf("{{$tableName | firstCharToLower}}.{{.ColName | firstCharToUpper}}Length() %d != prev %d",
			childLength, prevChildLength)
	}
	prevChildLength = childLength

	// Populate gotables table column {{.ColName}} from FlatBuffers table child vector {{.ColName}}.
	// Take no chances of writing beyond a column or vector length before all {{$tableName}} children have been checked.
	for rowIndex := 0; rowIndex < min(childLength, table.RowCount()); rowIndex++ {
		// Get the {{.ColName}} cell value from FlatBuffers, and set the corresponding {{.ColName}} cell value in gotables.
		{{.ColName}} := {{$tableName | firstCharToLower}}.{{.ColName | firstCharToUpper}}(rowIndex)
		{{- if .IsString}}
		// FlatBuffers stores strings as []byte arrays. Convert {{.ColName}} []byte to string.
		err = table.Set{{.ColType | firstCharToUpper}}("{{.ColName}}", rowIndex, string({{.ColName}}))
		if err != nil { return nil, err }
		{{else if .IsScalar}}
		{{- if .IsBool}}
		// FlatBuffers stores bools as bytes. Convert {{.ColName}} byte to bool.
		err = table.Set{{.ColType | firstCharToUpper}}("{{.ColName}}", rowIndex, byteToBool({{.ColName}}))
		{{else}}
		err = table.Set{{.ColType | firstCharToUpper}}("{{.ColName}}", rowIndex, {{.ColName}})
		{{end}}
		{{else}}
		return nil, fmt.Errorf("Unimplemented col type: %s", {{.ColType}})
		{{end}}
	}

	{{end}}
	{{end}}

	return tableSet, nil
}

/*
	FlatBuffers stores bool as byte=1 for true and byte=0 for false.

	The rules for reading a bool are:
	When a stored value is interpreted as boolean it should not be assumed to be either 1 or 0 but rather as not equal to 0.
	(From: https://github.com/dvidelabs/flatcc/blob/master/doc/binary-format.md#flatbuffers-binary-format)
*/
func byteToBool(b byte) bool {
	return b != 0
}

// Take no chances of writing beyond a column or vector length before all children have been checked.
func min(a int, b int) int {
	if a < b {
		return a
	} else {
		return b
	}
}
