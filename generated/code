/*
	Automatically generated source code. DO NOT MODIFY. Generated 9:12 PM Saturday 30 Sep 2017.

	type User struct generated from *gotables.Table [User] for including in your code.
*/
type User struct {
	name string
	id uint64
}
/*
	Automatically generated source code. DO NOT MODIFY. Generated 9:12 PM Saturday 30 Sep 2017.
	Generate a slice of type User struct from *gotables.Table [User] for including in your code.
*/
func TypeStructSliceFromTable_User(table *gotables.Table) ([]User, error) {
	if table == nil {
		return nil, fmt.Errorf("TypeStructSliceFromTable_User(slice []User) slice is <nil>")
	}

	var User []User = make([]User, table.RowCount())

	for rowIndex := 0; rowIndex < table.RowCount(); rowIndex++ {
		name, err := table.GetString("name", rowIndex)
		if err != nil {
			return nil, err
		}
		User[rowIndex].name = name

		id, err := table.GetUint64("id", rowIndex)
		if err != nil {
			return nil, err
		}
		User[rowIndex].id = id
	}

	return User, nil
}
/*
	Automatically generated source code. DO NOT MODIFY. Generated 9:12 PM Saturday 30 Sep 2017.

	Generate a gotables Table [User] from a slice of type struct []User for including in your code.
*/
func TypeStructSliceToTable_User(slice []User) (*gotables.Table, error) {
	if slice == nil {
		return nil, fmt.Errorf("TypeStructSliceToTable_User(slice []User) slice is <nil>")
	}

	var err error

	var table *gotables.Table
	var tableName string = "User"
	var colNames []string = []string{"name","id"}
	var colTypes []string = []string{"string","uint64"}
	table, err = gotables.NewTableFromMetadata(tableName, colNames, colTypes)
	if err != nil {
		return nil, err
	}

	for rowIndex := 0; rowIndex < len(slice); rowIndex++ {
		err = table.AppendRow()
		if err != nil {
			return nil, err
		}

		err = table.SetString("name", rowIndex, slice[rowIndex].name)
		if err != nil {
			return nil, err
		}

		err = table.SetUint64("id", rowIndex, slice[rowIndex].id)
		if err != nil {
			return nil, err
		}
	}

	return table, nil
}

