package {{.PackageName}}

/*
	{{.FlatTablesCodeFileName}}
	DO NOT MODIFY
	{{.AutomaticallyFrom}}
*/

import (
	{{range .Imports}}
	{{- .}}
	{{end}}
)

/*
Copyright (c) {{.Year}} Malcolm Gorman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

func init() {
	log.SetFlags(log.Lshortfile)
}
var where = log.Print

func funcName() string {
	pc, _, _, _ := runtime.Caller(1)
	nameFull := runtime.FuncForPC(pc).Name() // main.foo
	nameEnd := filepath.Ext(nameFull)        // .foo
	name := strings.TrimPrefix(nameEnd, ".") // foo
	return name
}

/*
	This function FlatTablesFromTableSet() is generated automatically by github.com/urban-wombat/flattablesmain/gotft.go

	(1) You must first run gotft (means: gotables FlatTables) pass it -f gotables file and specify -n namespace.
		Go package dir <namespace> will be created. All flatbuffers flatc and flattables generated code will land in dir <namespace>.
	    Utility gotft creates schema file <namespace>.fbs, and a custom set of functions in a file named <namespace>_flattables.go.

	(2) 
*/
func FlatTablesFromTableSet(tableSet *gotables.TableSet) (flatTables *FlatTables, flatBuffers []byte, err error) {
	if tableSet == nil {
		return nil, nil, fmt.Errorf("tableSet.%s() tableSet is <nil>", funcName())
	}

	const initialSize = 0
	builder := flatbuffers.NewBuilder(initialSize)
	if builder == nil {
		return nil, nil, fmt.Errorf("Could not create FlatBuffers builder") 
	}

	// Call each function to get its FlatBuffers buffer.

	var buffers = make([][]byte, tableSet.TableCount()) // For all the tables.
	var table *gotables.Table

	{{range $tableIndex, $element := .Tables}}
	// Get {{.Table.Name}} as FlatBuffers from *gotables.Table
	table, err = tableSet.TableByTableIndex({{$tableIndex}})
	if err != nil { return nil, nil, err }

	buffers[{{$tableIndex}}], err = {{.Table.Name}}FlatBuffersFromTable(table)
	if err != nil { return nil, nil, err }

// Testing buffer ...
//	var table{{.Table.Name}} *{{.Table.Name}} = GetRootAs{{.Table.Name}}(buffers[{{$tableIndex}}], 0)
//	table{{.Table.Name}}Length := table{{.Table.Name}}.XLength()
//	fmt.Printf("table{{.Table.Name}}Length = %d\n", table{{.Table.Name}}Length)

	{{end}}

	// Now populate FlatTables

	var offsets []flatbuffers.UOffsetT = make([]flatbuffers.UOffsetT, tableSet.TableCount())

	{{range $tableIndex, $element := .Tables -}}
	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name}}
where()
	// Populate FlatTables with table {{.Table.Name}}
	offsets[{{$tableIndex}}] = builder.CreateByteVector(buffers[{{$tableIndex}}])
	{{end}}

	FlatTablesStart(builder)

	{{range $tableIndex, $element := .Tables -}}
	{{/* Save .Table.Name before it goes out of scope. */}}
	{{$tableName := .Table.Name}}
	FlatTablesAdd{{.Table.Name}}(builder, offsets[{{$tableIndex}}])
	{{end}}

	var offset flatbuffers.UOffsetT = FlatTablesEnd(builder)
	builder.Finish(offset)
	flatBuffers = builder.FinishedBytes()

	flatTables = GetRootAsFlatTables(flatBuffers, 0)

	return
}

{{/* Write a separate function for each FlatBuffers table. */}}
{{range $tableIndex, $element := .Tables}}
{{/* Save .Table.Name before it goes out of scope. */}}
{{$tableName := .Table.Name}}
func {{.Table.Name}}FlatBuffersFromTable(table *gotables.Table) (flatBuffersLocal []byte, err error) {
	if table == nil {
		return nil, fmt.Errorf("table.%s() table is <nil>", funcName())
	}

	const initialSize = 0
	builderLocal := flatbuffers.NewBuilder(initialSize)
	if builderLocal == nil {
		return nil, fmt.Errorf("Could not create FlatBuffers builderLocal for table {{.Table.Name}}") 
	}

	// Create each flatbuffers table child (gotables.Table column).

	{{range .Cols}}
	var {{.ColName}}Vector flatbuffers.UOffsetT
	{{- end}}

{{/*
	{{range .Cols}}
	// Create child: {{.ColName | firstCharToUpper}}
	if flattables.IsFlatBuffersScalar("{{.ColType}}") {
		{{$tableName}}Start{{.ColName | firstCharToUpper}}Vector(builderLocal, table.RowCount())
		for rowIndex := table.RowCount()-1; rowIndex >= 0; rowIndex-- {
			cell, err := table.Get{{.ColType | firstCharToUpper}}("{{.ColName}}", rowIndex)
			if err != nil { return nil, err }
	
			// where(fmt.Sprintf("{{.ColName}}: builderLocal.Prepend(cell) rowIndex = %d cell = %v\n", rowIndex, cell))
			builderLocal.Prepend{{if .IsScalar}}{{.ColType | firstCharToUpper}}{{else}}UOffsetT{{end}}(cell)
		}
		{{.ColName}}Vector = builderLocal.EndVector(table.RowCount())
	} else {
		fmt.Printf("Don't know how to handle a {{.ColType}}\n")
	}
	{{end}}
*/}}
	{{range .Cols}}
	// Create child: {{.ColName | firstCharToUpper}}
	if flattables.IsFlatBuffersScalar("{{.ColType}}") {
		{{$tableName}}Start{{.ColName | firstCharToUpper}}Vector(builderLocal, table.RowCount())
		for rowIndex := table.RowCount()-1; rowIndex >= 0; rowIndex-- {
			cell, err := table.Get{{.ColType | firstCharToUpper}}("{{.ColName}}", rowIndex)
			if err != nil { return nil, err }
			cell = cell	// Avoid "cell declared and not used" error when col is non-scalar.
	
			builderLocal.Prepend{{if .IsScalar}}{{.ColType | firstCharToUpper}}(cell){{else}}UOffsetT({{.ColName}}Vector){{end}}
		}
		{{.ColName}}Vector = builderLocal.EndVector(table.RowCount())
	} else {
		fmt.Printf("Don't know how to handle a {{.ColType}}\n")
	}
	{{end}}

	// Start FlatBuffers table: {{.Table.Name}}
	{{.Table.Name}}Start(builderLocal)

	// Add each child to the table: {{.Table.Name}}
	{{range .Cols}}
	// Add child: {{.ColName | firstCharToUpper}} 
	{{$tableName}}Add{{.ColName | firstCharToUpper}}(builderLocal, {{.ColName}}Vector)
	{{end}}

	// End FlatBuffers table: {{.Table.Name}}
	var offset flatbuffers.UOffsetT = {{.Table.Name}}End(builderLocal)
	builderLocal.Finish(offset)
	flatBuffersLocal = builderLocal.FinishedBytes()

	return
}
{{end}} {{/* end range Tables */}}
